* LearnJavaScript.org
* LearnFlow:
** eloquent JavaScript -> 深入浅出 ES6 -> React -> [[http://zh.discovermeteor.com/chapters/introduction/][Meteor]] 
* this file is used to note the process of learning JavaScript
* JavaScript : Prototype
prototype, instanceof
* First book : Eloquent JavaScript, w3cschool about JS.
** Eloquent JavaScript:
*** JavaScript : not only the browser outside of the browser
*** Don’t assume you understand them until you’ve actually written a working solution.
** first basic type , function and others
** main use of this programming language
- Besides explaining JavaScript, I also will introduce the basic principles 
  of programming. Programming, it turns out, is hard. The fundamental rules
  are typically simple and clear. But programs built on top of these rules
  tend to become complex enough to introduce their own rules and complexity.
  You’re building your own maze, in a way, and you might just get lost in it.
- It is up to you to make the necessary effort. When you are struggling
   to follow the book, do not jump to any conclusions about your own capabilities.
  You are fine—you just need to keep at it. Take a break, reread some material,
  and always make sure you read and understand the example programs and exercises.
  Learning is hard work, but everything you learn is yours and will make subsequent
  learning easier.
- To some of us, writing computer programs is a fascinating game. A program is
  a building of thought. It is costless to build, it is weightless, and it grows
  easily under our typing hands.
- Keeping programs under control is the main problem of programming
- The art of programming is the skill of controlling complexity.
  The great program is subdued—made simple in its complexity.
* write semicolon
* fram > time note, so no timestamp
** tentacle model of variable bindings
** basic type and output statement
:LOGBOOK:
CLOCK: [2015-10-20 周二 15:52]--[2015-10-20 周二 16:17] =>  0:25
CLOCK: [2015-10-20 周二 15:15]--[2015-10-20 周二 15:40] =>  0:25
CLOCK: [2015-10-20 周二 14:42]--[2015-10-20 周二 15:07] =>  0:25
CLOCK: [2015-10-20 周二 14:14]--[2015-10-20 周二 14:39] =>  0:25
CLOCK: [2015-10-20 周二 12:00]--[2015-10-20 周二 12:25] =>  0:25
CLOCK: [2015-10-20 周二 11:25]--[2015-10-20 周二 11:50] =>  0:25
CLOCK: [2015-10-20 周二 10:49]--[2015-10-20 周二 11:14] =>  0:25
:END:
six types: numbers, strings, booleans, undefined values, objects, functions
- number :: 64 bits, 2^64 = 18+18ge0
  - special : infinite, -infinite,  NaN: Not a Number
  - number.string(), number.string(2/8/16)
- string :: '' ""  \   test: "\\\"
  - parseInt(string, (2/8/10/16)), parseFloat(string) :: convert part value
- boolean :: true, false   compare as unicode standard
  - NaN != NaN ::
  - &&  ||  ! ::
  - ( ? : ) ::
  - null undefined :: denote the absence of a meaningful value
    - null == 0 :: false,  only == null and defined
  - 0, "", NaN, == false :: 
    - ===, !==, test the precisely vale equal or not
      - == != , will convert type automatically
- typeof()
- side effects :: 副作用
  - make impression on the world.
- semicolon :: recommand always add semicolon,
  - the rules for when it can be safely omiited are somewhat complex and error-porne ::
- work flow :: draw the flow picture with hand
- strt from 0 :: rom C pitfalls, if like [1, 100], form 1 start
- += ::
- a+++  a--
- camel Name Method ::
- the usage of "||" in 2.2 exercise ::
- the difference between if and if-else::
- watch the null string '' and ' ' :: 
** data collection type like array, list, dict, set, etc.
:LOGBOOK:
CLOCK: [2015-10-21 周三 15:07]--[2015-10-21 周三 15:32] =>  0:25
CLOCK: [2015-10-21 周三 14:02]--[2015-10-21 周三 14:27] =>  0:25
CLOCK: [2015-10-21 周三 10:25]--[2015-10-21 周三 10:50] =>  0:25
CLOCK: [2015-10-21 周三 09:48]--[2015-10-21 周三 10:13] =>  0:25
:END:
*** var listOfNumber = [1, 2, 3...] 
- called an array
- in JS, every value has property, except null and defined
- to access the property:
  Whereas value.x fetches the property of value named “x”, as to say, x is variable name
  value[x] tries to evaluate, as to say x is expression
  the expression x and uses the result as the property name.
- array : .pop() .push(.., .., ...) .join("..") also some like in Python, '..'.join(string)
- indexOf(), search the given element in an array from start, if not existed, return -1
  - if not exists, return -1
  - lastIndexOf(), search from the end
  - both the two functions take optional second argument that indicates where to
    start searching from
- slice
- concat
- generally useful array methods.
  - push, pop  corresponding method at the start of array is  unshift, shift
- foreach
**** forEach
- takes only one required argument: the function to be executed for each element.
**** filter
**** array.forEach(function), array.filter(array, function), array.map(array, function)
*** object {...}
- var day1 = { a: true, b: ['a', 'b'] };   diff in Python
- Properties whose names are not valid variable names or valid numbers have to be quoted.
- var day2 = {'2': 2, 'test one': 3};
- delete, in  also can be used in array
- string value cannot be changes, almost in every language
- *coefficient* 
- for (var x in map) { console.log(x, map[x]);}
*** string
- string, boolean, num, their properties are immutable and can not be changed
  - but these types does have built-in properties
  - .length
  - .toUpperCase
  - slice
  - indexOf(),  can take a string containing many character, 'three'.indexOf('ee);
  - trim, remove whitespaces(space, tab, newline)
  - charAt();
*** arguments model
- .length
- arguments[i]
*** Math
- Math.max, .min, .sqrt
- .cos, .sin, .tan, .acos, .asin, .atan, .PI  write constants with all caps
- .random()  between 0(inclusive) and 1(exclusive)
- .floor(Math.random()*10)  whole random number, round down to the nearest whole number
- .ceil()  round up to a whole number
- .round() to the nearest number
*** global model
- every global various is stored in window variable, and presented as its property
*** exercise 4.3, 4.4

** string
** oop and function program
:LOGBOOK:
CLOCK: [2015-10-21 周三 16:21]--[2015-10-21 周三 16:46] =>  0:25
CLOCK: [2015-10-20 周二 17:07]--[2015-10-20 周二 17:32] =>  0:25
:END:
*** function
- var funcName = function(argu){...};
- function funcName(){...}
- return without an expression will return undefined
- in JS, only function create a new scope,  [} also do as it in some languages
- call stack
- too many arguments, ignored. too few arguments, assigned undefined
- closure
  + being able to reference a specific instance of local variables in an enclosing
    function—is called closure
- recursion
  + The dilemma of speed versus elegance is an interesting one.
    You can see it as a kind of continuum between human-friendliness and
    machine-friendliness.
- The reason I’m stressing this is that surprisingly many beginning
  programmers focus fanatically on efficiency, even in the smallest details.
  The result is bigger, more complicated, and often less correct programs,
  that take longer to write than their more straightforward equivalents and
  that usually run only marginally faster.
- .length
- String()
- about function name and usage
- pure function, side effect
- don't have to repeat as much, and group code into concept chunks
- "string".charAt(N) get the Nth character or letter
**** care about: "function" keyword, and return mechanism
*** high-order function
**** It has to become second nature, for a programmer, to notice when a concept is begging to be abstracted into a new word.
*** JSON 
- JSON.stringfy(json), JSON.parse(string)
*** It is helpful to roughly keep track of how often a piece of your program is going to run.
*** bind and apply method
** need to review contents after learning knowledge
** OOP
:LOGBOOK:
CLOCK: [2015-10-22 周四 16:45]--[2015-10-22 周四 17:10] =>  0:25
CLOCK: [2015-10-22 周四 16:15]--[2015-10-22 周四 16:40] =>  0:25
CLOCK: [2015-10-22 周四 15:38]--[2015-10-22 周四 16:03] =>  0:25
CLOCK: [2015-10-22 周四 14:28]--[2015-10-22 周四 14:53] =>  0:25
:END:
面向对象语言的要求
- 一种面向对象语言需要向开发者提供四种基本能力：
  * 封装 :: 把相关的信息（无论数据或方法）存储在对象中的能力
  * 聚集 :: 把一个对象存储在另一个对象内的能力
  * 继承 :: 由另一个类（或多个类）得来类的属性和方法的能力
  * 多态 :: 编写能以多种方法运行的函数或方法的能力
  * ECMAScript 支持这些要求，因此可被是看做面向对象的。
- herit, override, virtual(pure virtual class, method, interface as connectors),
  is enough
- this, method, properties, object
- apply, call, bind
- the way JavaScript objects work ::
  - Object.getPrototypeOf
  - Object.create
- new, this
- prototype, add the same property to override the property
- properties : enumrable : added properties, show up in for/in loop
  - nonenumrable : standard properties,  do not show up in for/in loop
- .hasOwnProperty('..'), in
- defineProperty(Object.Prototype, 'property_name', {enumrable: false, value: 'hi'})
- Object.create(null), create an object without prototype
- lay out an table
- treated as constructor :: new function_name()

** bind(this)
this only pass one container, the inner function need bind this
* eloquent JS use an program, difficult. go to w3cschool
** 对象冒充 ：understand 'this' keyword correctly 
** 
* Leran Function, must clearly about input, output and arguments
* ES6
** arrow function & 模板字符串 `...`
** for-of loop
- for-in loop traverse the properties
- for-of loop traverse the value of data
  - do not support the basic object
  - Symbol.iterator
** generator
- function*, 
- when encounter 'yield' frozen,
- iterator.next() unfreeze to go on to the next 'yield'
- iterator through the es6 standard
** own : promise ? 
** `
- `i have ${num} boks`, \`, \$, \{, \}
- if ${num} not a string, it will call .toString() method
- `, can write through breaked lines
** function(a, ...b)
- assign arguments excep a to variable b;
- default argument, like Python fucntion(a='', b=''),
  - in es6, valued form left to right
  - function(a='', b), default: b=undefined
** deconstruct
- for (var [key] of map){..}
- for (var [,value] of map){...}
** arrow function
<!--	单行注释
-->	“趋向于”操作符
<=	小于等于
=>	这又是什么？
a => a > 0;
(a, b) => a + b;
event => {..}  execute the sentenses in {}
event => ({})  create an {} object
- this
  - 内层函数不会从外围函数继承this值
  - can used arrow function function (x){ _.each(x, x => this.add(x))}
** set 
- new Set(iterable), turn one iterable object to an set,
- Map, Set, WeakSet, WeakMap
** generator
- .next({..}) :: .next() can receive an argument,
  - the generator will save the argument 
